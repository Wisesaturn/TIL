[{"title":"BST","type":0,"sectionRef":"#","url":"docs/CS/Data_Structure/BST/","content":"","keywords":""},{"title":"🤔 BST(Binary Search Tree, 이진 탐색 트리)이란?​","type":1,"pageTitle":"BST","url":"docs/CS/Data_Structure/BST/#-bstbinary-search-tree-이진-탐색-트리이란","content":" 트리 구조를 가지면서, 이진 탐색하기 쉽게 짜여져 있는 트리입니다.해당 Node로부터 왼쪽 Subtree의 모든 Node는 해당 Node보다 작은 값이며, 오른쪽 Subtree의 모든 Node는 해당 Node보다 큰 값을 가지고 있습니다. "},{"title":"특징​","type":1,"pageTitle":"BST","url":"docs/CS/Data_Structure/BST/#특징","content":"모든 Node의 Children은 최대 2개입니다. (왼쪽 아니면 오른쪽) 모든 Tree가 균형 상태일 때 (모든 Node의 자손이 2개이거나 없다면) 시간복잡도는 O(logN)입니다. 그렇지 않다면, 최대 O(N)의 시간이 걸립니다. 값을 찾을 때, Binary Search를 이용하면 됩니다. "},{"title":"🤔 BST의 삭제, 삽입, 탐색 과정​","type":1,"pageTitle":"BST","url":"docs/CS/Data_Structure/BST/#-bst의-삭제-삽입-탐색-과정","content":"탐색(Search) Root Node에서 시작해 Binary Search 과정을 진행합니다. 삽입(Insert) Root Node에서 시작해 Binary Search 과정을 진행합니다.Leaf Node까지 도달 후 Binary Search를 통해 값에 따라 위치를 정한 후 Node를 추가합니다. 삭제(Deletion) 맨 마지막 Leaf Node가 아닌 중간 Node를 지워야 한다면, 지울 Node의 Children을 이용해야 합니다. Leaf Node일 때 값을 지우고 부모에게 Null 값을 return합니다. Internal Node일 때 가장 가까운 Successor(자손)을 찾고, 지우려는 Node에 그 자손의 값을 복사합니다. Successor는 right Subtree의 최솟값입니다. 그 자손의 Data를 삭제합니다. "},{"title":"🛠 관련 문제​","type":1,"pageTitle":"BST","url":"docs/CS/Data_Structure/BST/#-관련-문제","content":"2957번: 이진 탐색 트리 (acmicpc.net)5639번: 이진 검색 트리 (acmicpc.net) "},{"title":"Hash Table","type":0,"sectionRef":"#","url":"docs/CS/Data_Structure/Hash_Table/","content":"","keywords":""},{"title":"🤔 Hash Table(해시 테이블)이란?​","type":1,"pageTitle":"Hash Table","url":"docs/CS/Data_Structure/Hash_Table/#-hash-table해시-테이블이란","content":"데이터를 저장하는 자료구조 이론 중 Key와 Value를 쌍을 이뤄 저장하는 방법Key 값을 Hash Function에 입력하여 도출된 값(Hash Value)을 index로 삼아 Table에 데이터를 저장한다.  Key 값을 Hash function에 입력하여 데이터를 저장하고 있다. "},{"title":"🤔 Hash Table(해시 테이블)을 왜 쓸까요?​","type":1,"pageTitle":"Hash Table","url":"docs/CS/Data_Structure/Hash_Table/#-hash-table해시-테이블을-왜-쓸까요","content":"일반적으로 데이터를 저장할 때 Array에 단순 Index를 사용하여 저장하곤 하는데 Hash function을 사용하여 키를 Mapping하면 시간복잡도를 좀 더 단축시킬 수 있는 장점이 있습니다. 보통 복잡한 Bruth-force 문제를 풀 때 사용하면 좋습니다 탐색, 삽입, 삭제의 과정 모두 O(1)의 시간복잡도를 가질 수 있습니다. (평균 시간 복잡도 : O(1)) "},{"title":"🤔 Hash Table(해시 테이블)의 과정은?​","type":1,"pageTitle":"Hash Table","url":"docs/CS/Data_Structure/Hash_Table/#-hash-table해시-테이블의-과정은","content":"해당 Key 값을 Hash Function을 통해 Hash Table로 전달됩니다.이 때, 전달되는 값은 Hash Table의 Index로 사용됩니다. 일반적인 배열로 사용하되, 인덱스를 Hash Function을 통해 사용합니다. "},{"title":"Hash Function의 대표적인 알고리즘​","type":1,"pageTitle":"Hash Table","url":"docs/CS/Data_Structure/Hash_Table/#hash-function의-대표적인-알고리즘","content":"Division Method 나눗셈을 이용하는 방법으로, 입력값을 테이블의 크기로 나누어 계산하는 방법이다 (Index = Input % Table Size) Multiplication Method 숫자로 된 Key값 K와 0과 1 사이의 실수 A, 특정 제곱수인 M을 사용하여 다음과 같은 식을 통해 계산하는 방법이다. (h(K) = (K A mod 1) M) Universal Hashing 다수의 해시함수를 만들어 집합 H에 넣어두고, 무작위로 해시함수를 선택하여 해시값을 만드는 방법이다. "},{"title":"😥 Hash Table(해시 테이블)의 문제점​","type":1,"pageTitle":"Hash Table","url":"docs/CS/Data_Structure/Hash_Table/#-hash-table해시-테이블의-문제점","content":"Hash Function은 다른 Key값을 넣었을 때, 동일한 결과값을 도출할 수 있습니다. 이렇게 된다면, 다른 Input에 동일한 Output을 내놓을 수 있습니다. 😨. 이를 Hash Collision(해시 충돌)이라고 일컫습니다. "},{"title":"해결 방법​","type":1,"pageTitle":"Hash Table","url":"docs/CS/Data_Structure/Hash_Table/#해결-방법","content":"Separate Chaining 메모리를 추가적으로 사용하여 동일한 버킷에 값이 있으면, Linked List 혹은 Tree 방식을 사용해 해당 Value 뒤에 저장하는 방식을 사용합니다. 데이터 맨 끝에 연결하여 저장하는 법이 핵심입니다. Open Addressing Hash Table에서 비어있는 공간이 있다면 이를 활용하는 방법입니다.대표적인 방법 Linear Probing 현재의 Index로부터 고정폭 만큼씩 이동하여 차례대로 검색해 비어 있는 공간에 저장하는 방법입니다.문제점 Load Factor가 커질 수 있습니다. 들어가야 하는 Hash Value에 항상 값이 차있다면, 계속 밀리고 밀려서 시간이 급격하게 걸릴 수가 있습니다. Quadratic Probing 현재의 Index로부터 고정폭이 아닌, 다음 칸의 제곱을 이용하여 차례대로 검색하여 비어 있는 공간에 저장하는 방식입니다.문제점 역시 마찬가지로 Load Factor가 커질 수 있습니다. Cuckoo Hashing 다수의 Table과 다수의 Hash Function을 사용해 보는 방법입니다.각 테이블마다 Hash Function이 다르게 적용됩니다.역시 마찬가지로 빈칸을 찾을 때까지 이 과정을 반복합니다.  이렇게 Hash Coliision를 방지하는 방법들은 공간을 많이 사용한다는 단점이 존재합니다.또한, Hash Table은 C++의 Vector나 LinkedList처럼 확장해주는 방식으로 만들게 된다면 효율이 좋지 않습니다. 항상 테이블을 설계할 때 가급적 확장을 하지 않도록 해주어야 합니다.테이블의 공간사용률이 80% 이상이라면, 해시 충돌이 빈번하게 발생하여 성능이 저하된다고 합니다. "},{"title":"🛠 관련 문제​","type":1,"pageTitle":"Hash Table","url":"docs/CS/Data_Structure/Hash_Table/#-관련-문제","content":"17219번: 비밀번호 찾기 (acmicpc.net) "}]